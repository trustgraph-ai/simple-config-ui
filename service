#!/usr/bin/env python3

import _jsonnet as j
from aiohttp import web
import logging
import os
import json
import yaml
import zipfile
from io import BytesIO

logger = logging.getLogger("service")
logger.setLevel(logging.INFO)

class Generator:

    def __init__(self, config, base="./templates/", version="0.0.0"):

        self.jsonnet_base = base
        self.config = config
        self.version = f"\"{version}\"".encode("utf-8")

    def process(self, config):

        res = j.evaluate_snippet("config", config, import_callback=self.load)
        return json.loads(res)

    def load(self, dir, filename):

        logger.debug("Request jsonnet: %s %s", dir, filename)

        if filename == "config.json" and dir == "":
            path = os.path.join(".", dir, filename)
            return str(path), self.config

        if filename == "version.jsonnet" and dir == "./templates/values/":
            path = os.path.join(".", dir, filename)
            return str(path), self.version

        if dir:
            candidates = [
                os.path.join(".", dir, filename),
                os.path.join(".", filename)
            ]
        else:
            candidates = [
                os.path.join(".", filename)
            ]

        try:

            if filename == "vertexai/private.json":

                return candidates[0], private_json.encode("utf-8")

            for c in candidates:
                logger.debug("Try: %s", c)

                if os.path.isfile(c):
                    with open(c, "rb") as f:
                        logger.debug("Loading: %s", c)
                        return str(c), f.read()

            raise RuntimeError(
                f"Could not load file={filename} dir={dir}"
            )
                
        except:

            path = os.path.join(self.jsonnet_base, filename)
            logger.debug("Try: %s", path)
            with open(path, "rb") as f:
                logger.debug("Loaded: %s", path)
                return str(path), f.read()

class Api:
    def __init__(self, config=None):

        if config:
            self.config = config
        else:
            self.config = {}

        self.port = int(self.config.get("port", "8081"))
        self.app = web.Application(middlewares=[])

        self.app.add_routes([web.post("/api/generate", self.generate)])
        self.app.add_routes([web.get("/{tail:.*}", self.everything)])

    async def everything(self, request):

        if ".." in request.path:
            return web.HTTPNotFound()

        if request.path == "/":
            with open("dist/index.html", "r") as f:
                return web.Response(
                    text=f.read(), content_type="text/html"
                )

        print(request.path)

        if request.path.endswith(".css"):
            with open("dist" + request.path, "r") as f:
                data = f.read()
            return web.Response(
                text=data, content_type="text/css"
            )

        if request.path.endswith(".js"):
            with open("dist" + request.path, "r") as f:
                data = f.read()
            return web.Response(
                text=data, content_type="text/javascript"
            )

        if request.path.endswith(".html"):
            with open("dist" + request.path, "r") as f:
                data = f.read()
            return web.Response(
                text=data, content_type="text/html"
            )

        return web.HTTPNotFound()

    def process(
            self, config, version="0.11.19", platform="docker-compose",
    ):

        config = config.encode("utf-8")

        gen = Generator(config, version=version)


        with open(f"./templates/config-to-{platform}.jsonnet", "r") as f:
            wrapper = f.read()

        processed = gen.process(wrapper)

        return processed

    async def generate(self, request):

        print("Generate...")

        config = await request.text()

        print(config)

        processed = self.process(config)
        y = yaml.dump(processed)

        mem = BytesIO()

        with zipfile.ZipFile(mem, mode='w') as out:

            def output(name, content):
                logger.info(f"Adding {name}...")
                out.writestr(name, content)

            fname = "docker-compose.yaml"

            output(fname, y)

            # Grafana config
            with open("grafana/dashboards/dashboard.json") as f:
                output(
                    "grafana/dashboards/dashboard.json",
                    f.read()
                )

            with open("grafana/provisioning/dashboard.yml") as f:
                output(
                    "grafana/provisioning/dashboard.yml",
                    f.read()
                )

            with open("grafana/provisioning/datasource.yml") as f:
                output(
                    "grafana/provisioning/datasource.yml",
                    f.read()
                )

            # Prometheus config
            with open("prometheus/prometheus.yml") as f:
                output("prometheus/prometheus.yml", f.read())

        return web.Response(
            body=mem.getvalue(),
            content_type = "application/octet-stream"
        )

    def run(self):

        web.run_app(self.app, port=self.port)

a = Api()

a.run()

